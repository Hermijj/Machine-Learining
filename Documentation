# Olympic Medals Prediction Project Report

## Debre Birhan University
**College of Computing, Department of Software Engineering**  
**Fundamentals of Machine Learning**  

**Name:** Hermela Gashaw  
**ID:** 1401389  
**Submitted to:** Seble E  
**Submission Date:** 02/02/2025  

---

## Table of Contents
1. [Problem Definition](#problem-definition)
2. [Data Source & Description](#data-source--description)
3. [Exploratory Data Analysis (EDA) Findings and Visualizations](#exploratory-data-analysis-eda-findings-and-visualizations)
4. [Data Preprocessing Steps and Choices](#data-preprocessing-steps-and-choices)
5. [Model Selection and Training Details](#model-selection-and-training-details)
6. [Model Evaluation Metrics and Discussion](#model-evaluation-metrics-and-discussion)
7. [Interpretation of Results](#interpretation-of-results)
8. [Deployment Details and Instructions](#deployment-details-and-instructions)
9. [Potential Limitations and Future Improvements](#potential-limitations-and-future-improvements)
10. [References](#references)

---

## 1. Problem Definition

### Objective
Predict the number of medals an Olympic team will win based on historical performance data. This is approached as a regression task, with the number of medals being the target variable.

**Interactive Element:**  
- *Question*: What additional factors do you think could influence a team’s medal count? *(Add your thoughts below!)*

### Motivation
Understanding which factors contribute to a team’s success can help in strategizing and resource allocation. This project focuses on two key predictors:
- **Athletes**: The number of athletes on a team.
- **Previous Medals**: The count of medals won in prior events.

**Interactive Element:**  
- *Poll*: Which factor do you believe has a stronger influence on medal counts?
  - [ ] Number of Athletes
  - [ ] Previous Medals

---

## 2. Data Source & Description

### Data Source
We utilized data from the [120 Years of Olympic History: Athletes and Results](https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results) dataset originally hosted on Kaggle.

**Interactive Element:**  
- *Download*: [teams.csv](https://drive.google.com/uc?export=download&id=1L3YAlts8tijccIndVPB-mOsRpEpVawk7)

### Dataset Overview
- **Rows:** 2144  
- **Columns:** 11

### Column Descriptions
- `team`: Name of the team
- `country`: Country that the team represents
- `year`: Year of the Olympic event
- `athletes`: Number of athletes in the team
- `age`: Average age of the athletes
- `prev_medals`: Number of medals won in previous events
- `medals`: Number of medals won in the current event *(target variable)*
- `events`: Number of events participated in
- `height`: Average height of athletes
- `weight`: Average weight of athletes
- `prev_3_medals`: Medals won in the last 3 years *(some missing values)*

---

## 3. Exploratory Data Analysis (EDA) Findings and Visualizations

### Visualizations
- **Scatter Plots with Regression Lines**: Relationships between `athletes` vs `medals`, and `age` vs `medals`.
- **Histograms**: Distribution of the `medals` variable.

**Interactive Element:**  
- *Visualization Embed*: View dynamic scatter plots and histograms [here](#) *(link to an interactive chart or embedded visualization)*.

---

## 4. Data Preprocessing Steps and Choices

### Feature Selection
- **Predictors**: `athletes`, `prev_medals`
- **Target Variable**: `medals`

**Interactive Element:**  
- *Question*: Are there other features you would include in the model? *(Share your ideas!)*

### Post-Prediction Adjustments
- Negative predictions set to zero.
- Rounded predictions to the nearest whole number.

---

## 5. Model Selection and Training Details

### Model Training
```python
from sklearn.linear_model import LinearRegression

# Instantiate model
reg = LinearRegression()

# Train the model
predictors = ["athletes", "prev_medals"]
reg.fit(train[predictors], train["medals"])

# Generate predictions
predictions = reg.predict(test[predictors])
test["predictions"] = predictions
```

**Interactive Element:**  
- *Code Sandbox*: Run the above code directly [here](#) *(link to a live code editor like Google Colab or an embedded sandbox)*.

---

## 6. Model Evaluation Metrics and Discussion

### Metric Calculation
```python
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(test["medals"], test["predictions"])
rmse = np.sqrt(mean_squared_error(test["medals"], test["predictions"]))
r2 = r2_score(test["medals"], test["predictions"])

print(f"Mean Absolute Error (MAE): {mae:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
print(f"R² Score: {r2:.4f}")
```

**Interactive Element:**  
- *Try It Yourself*: Upload your test dataset and see the model’s evaluation metrics instantly [here](#).

---

## 7. Interpretation of Results

### Key Insights
- `athletes` and `prev_medals` are strong predictors of `medals`.

**Interactive Element:**  
- *Discussion Board*: Share your interpretation of the results and compare them with others [here](#).

---

## 8. Deployment Details and Instructions

### Running the API
1. **Install Dependencies:**
```bash
pip install fastapi uvicorn joblib pandas numpy scikit-learn
```

2. **Start the API:**
```bash
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
```

3. **Access API Documentation:**
[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)

**Interactive Element:**  
- *Live API Demo*: Try out the API in real-time [here](#) *(link to deployed API or sandbox environment)*.

---

## 9. Potential Limitations and Future Improvements

### Future Improvements
- **User Interface**: Develop a simple front-end for API interaction.

**Interactive Element:**  
- *Idea Submission*: Suggest features you’d like to see in the future UI [here](#).

---

## 10. References
- ML Individual Assignment Guidelines
- [pandas Documentation](https://pandas.pydata.org/docs/)
- [scikit-learn Documentation](https://scikit-learn.org/stable/documentation.html)
- [FastAPI Documentation](https://fastapi.tiangolo.com/)

---

Thank you for reviewing this project! **Got feedback or questions?** Drop them [here](#)!

