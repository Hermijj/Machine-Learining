# Olympic Medals Prediction Project Report

## Debre Birhan University
**College of Computing, Department of Software Engineering**  
**Fundamentals of Machine Learning**  

**Name:** Hermela Gashaw  
**ID:** 1401389  
**Submitted to:** Seble E  
**Submission Date:** 02/02/2025  

---

## Table of Contents
1. [Problem Definition](#problem-definition)
2. [Data Source & Description](#data-source--description)
3. [Exploratory Data Analysis (EDA) Findings and Visualizations](#exploratory-data-analysis-eda-findings-and-visualizations)
4. [Data Preprocessing Steps and Choices](#data-preprocessing-steps-and-choices)
5. [Model Selection and Training Details](#model-selection-and-training-details)
6. [Model Evaluation Metrics and Discussion](#model-evaluation-metrics-and-discussion)
7. [Interpretation of Results](#interpretation-of-results)
8. [Deployment Details and Instructions](#deployment-details-and-instructions)
9. [Potential Limitations and Future Improvements](#potential-limitations-and-future-improvements)
10. [References](#references)

---

## 1. Problem Definition

### Objective
Predict the number of medals an Olympic team will win based on historical performance data. This is approached as a regression task, with the number of medals being the target variable.

### Motivation
Understanding which factors contribute to a team’s success can help in strategizing and resource allocation. This project focuses on two key predictors:
- **Athletes**: The number of athletes on a team.
- **Previous Medals**: The count of medals won in prior events.

---

## 2. Data Source & Description

### Data Source
We utilized data from the [120 Years of Olympic History: Athletes and Results](https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results) dataset originally hosted on Kaggle.

### Download Links
- [teams.csv](https://drive.google.com/uc?export=download&id=1L3YAlts8tijccIndVPB-mOsRpEpVawk7)

### Dataset Overview
- **Rows:** 2144  
- **Columns:** 11

### Column Descriptions
- `team`: Name of the team
- `country`: Country that the team represents
- `year`: Year of the Olympic event
- `athletes`: Number of athletes in the team
- `age`: Average age of the athletes
- `prev_medals`: Number of medals won in previous events
- `medals`: Number of medals won in the current event *(target variable)*
- `events`: Number of events participated in
- `height`: Average height of athletes
- `weight`: Average weight of athletes
- `prev_3_medals`: Medals won in the last 3 years *(some missing values)*

---

## 3. Exploratory Data Analysis (EDA) Findings and Visualizations

### Data Loading & Inspection
- Loaded into a **pandas DataFrame**.
- Identified missing values and data structure anomalies.

### Summary Statistics
- Computed **mean**, **median**, and **standard deviation** for all numeric columns.

### Correlation Analysis
- Significant correlations found between:
  - `athletes` and `medals`
  - `prev_medals` and `medals`

### Visualizations
- **Scatter Plots with Regression Lines**: Relationships between `athletes` vs `medals`, and `age` vs `medals`.
- **Histograms**: Distribution of the `medals` variable.

---

## 4. Data Preprocessing Steps and Choices

### Conversion and Cleaning
- Converted numeric columns using `pd.to_numeric`.
- Dropped non-numeric columns that became entirely NaN.
- Removed rows with missing values.

### Feature Selection
- **Predictors**: `athletes`, `prev_medals`
- **Target Variable**: `medals`

### Train-Test Split
- **80/20 split** based on year:
  - Training set: `year < 2012`
  - Testing set: `year >= 2012`

### Post-Prediction Adjustments
- Negative predictions set to zero.
- Rounded predictions to the nearest whole number.

---

## 5. Model Selection and Training Details

### Model Choice
A **Linear Regression** model was selected due to the continuous nature of the target variable and the linear relationships observed in the data.

### Justification
1. **Continuous Target**: `medals` is a count but treated as continuous.
2. **Linear Relationships**: Found via EDA between predictors and the target.
3. **Simplicity & Interpretability**: Linear regression is straightforward and interpretable.
4. **Data Suitability**: Fits the structured, numerical data well.

### Model Training
```python
from sklearn.linear_model import LinearRegression

# Instantiate model
reg = LinearRegression()

# Train the model
predictors = ["athletes", "prev_medals"]
reg.fit(train[predictors], train["medals"])

# Generate predictions
predictions = reg.predict(test[predictors])
test["predictions"] = predictions
```

---

## 6. Model Evaluation Metrics and Discussion

### Evaluation Metrics
- **Mean Absolute Error (MAE)**: Measures average absolute difference.
- **Root Mean Squared Error (RMSE)**: Measures error magnitude.
- **R² Score**: Indicates proportion of variance explained by the model.

### Metric Calculation
```python
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(test["medals"], test["predictions"])
rmse = np.sqrt(mean_squared_error(test["medals"], test["predictions"]))
r2 = r2_score(test["medals"], test["predictions"])

print(f"Mean Absolute Error (MAE): {mae:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
print(f"R² Score: {r2:.4f}")
```

### Discussion
- Metrics indicate reasonable model performance.
- Error distribution visualized with histograms.

---

## 7. Interpretation of Results

### Key Insights
- `athletes` and `prev_medals` are strong predictors of `medals`.
- R² score indicates a reasonable fit.
- Some teams show higher errors, likely due to unaccounted factors.

### Implications
- Provides insights into team performance.
- Identifies areas for feature engineering and model refinement.

---

## 8. Deployment Details and Instructions

### API Deployment with FastAPI
Deployed as an API using **FastAPI** for accessible predictions.

### API Endpoints
- **GET /**: Welcome message and usage instructions.
- **POST /predict/**: Accepts JSON input and returns predicted medals.

### Running the API
1. **Install Dependencies:**
```bash
pip install fastapi uvicorn joblib pandas numpy scikit-learn
```

2. **Start the API:**
```bash
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
```

3. **Access API Documentation:**
[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)

### API Code Overview (main.py)
```python
from fastapi import FastAPI
import joblib
import pandas as pd
from pydantic import BaseModel

# Load the trained model
model = joblib.load("linear_regression_model.pkl")

app = FastAPI(
    title="Olympic Medals Prediction API",
    description="Predict the number of medals a team will win based on key features.",
    version="1.0"
)

class MedalsInput(BaseModel):
    team: str
    country: str
    year: int
    athletes: int
    age: float
    prev_medals: float

@app.get("/")
def welcome():
    return {"message": "Welcome to the Olympic Medals Prediction API! Use /predict/ to get medal predictions."}

@app.post("/predict/")
def predict_medals(data: MedalsInput):
    try:
        input_data = pd.DataFrame([data.dict()])
        predictors = ["athletes", "prev_medals"]
        prediction = model.predict(input_data[predictors])[0]
        prediction = max(0, round(prediction))  # Ensure non-negative integer output
        return {
            "message": "Prediction successful!",
            "team": data.team,
            "country": data.country,
            "year": data.year,
            "predicted_medals": prediction
        }
    except Exception as e:
        return {"error": "Prediction failed. Please check your input data.", "details": str(e)}
```

---

## 9. Potential Limitations and Future Improvements

### Limitations
- **Limited Features**: Only `athletes` and `prev_medals` used.
- **Model Complexity**: Linear regression may not capture nonlinear relationships.

### Future Improvements
- **Data Enrichment**: Incorporate additional features (e.g., team budget, training quality).
- **Advanced Models**: Explore ensemble methods or neural networks.
- **Feature Engineering**: Apply feature scaling, interaction terms, or polynomial features.
- **API Enhancements**: Add retraining endpoints, logging, and error reporting.
- **User Interface**: Develop a simple front-end for API interaction.

---

## 10. References
- ML Individual Assignment Guidelines
- [pandas Documentation](https://pandas.pydata.org/docs/)
- [scikit-learn Documentation](https://scikit-learn.org/stable/documentation.html)
- [FastAPI Documentation](https://fastapi.tiangolo.com/)

---

Thank you for reviewing this project!

